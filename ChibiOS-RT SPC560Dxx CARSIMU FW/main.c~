/*
 ChibiOS/RT - Copyright (C) 2006-2014 Giovanni Di Sirio

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

/* Inclusion of the main header files of all the imported components in the
 order specified in the application wizard. The file is generated
 automatically.*/
#include "components.h"

#include "shellcmd.h"
#include "shellbt.h"
#include "speedsensor.h"
#include "pwm_lld_cfg.h"

bool_t bLightOn = false;
bool_t bCliGOn = false;

/*
 * Shell configuration structure, the first field is the serial port used by
 * the shell, the second is the array of commands accepted by the shell and
 * defined in shellcmd.c.
 */
static const ShellConfig shell_cfg1 = {(BaseSequentialStream *)&SD1,
                                       shell_commands};

/*
 * Shell configuration structure, the first field is the serial port used by
 * the shell, the second is the array of commands accepted by the shell and
 * defined in shellcmd.c.
 */
static const ShellConfig shell_cfg_car = {(BaseSequentialStream *)&SD2,
                                          shell_commands_car};

/*
 * LEDs blinker thread, times are in milliseconds.
 */
static WORKING_AREA(waThread1, 128);
static msg_t Thread1(void *arg) {

  (void)arg;
  chRegSetThreadName("blinker");

  while (TRUE) {

    if (bLightOn) {
      unsigned i;
      for (i = 0; i < 4; i++) {
        palClearPad(PORT_C, PC_LEDBLEU);
        osalThreadSleepMilliseconds(100);
        palClearPad(PORT_B, PB_LEDBLANCHE);
        osalThreadSleepMilliseconds(100);
        palClearPad(PORT_A, PA_LEDJAUNE1);
        osalThreadSleepMilliseconds(100);
        palClearPad(PORT_A, PA_LEDJAUNE2);
        osalThreadSleepMilliseconds(100);
        palClearPad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(100);
        palSetPad(PORT_C, PC_LEDBLEU);
        osalThreadSleepMilliseconds(100);
        palSetPad(PORT_B, PB_LEDBLANCHE);
        osalThreadSleepMilliseconds(100);
        palSetPad(PORT_A, PA_LEDJAUNE1);
        osalThreadSleepMilliseconds(100);
        palSetPad(PORT_A, PA_LEDJAUNE2);
        osalThreadSleepMilliseconds(100);
        palSetPad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(100);

      }

      for (i = 0; i < 4; i++) {
        palTogglePad(PORT_C, PC_LEDBLEU);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDBLEU);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDBLEU);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDBLEU);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDBLEU);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
        palTogglePad(PORT_C, PC_LEDBLEU);
        palTogglePad(PORT_B, PB_LEDBLANCHE);
        palTogglePad(PORT_A, PA_LEDJAUNE1);
        palTogglePad(PORT_A, PA_LEDJAUNE2);
        palTogglePad(PORT_C, PC_LEDROUGE);
        osalThreadSleepMilliseconds(250);
      }

      palSetPort(
          PORT_C,
          PAL_PORT_BIT(PC_LEDBLEU) | PAL_PORT_BIT(PB_LEDBLANCHE) | PAL_PORT_BIT(PA_LEDJAUNE1) | PAL_PORT_BIT(PA_LEDJAUNE2) | PAL_PORT_BIT(PC_LEDROUGE));

      palClearPad(PORT_C, PC_LEDBLEU);
      palClearPad(PORT_B, PB_LEDBLANCHE);
      palClearPad(PORT_A, PA_LEDJAUNE1);
      palClearPad(PORT_A, PA_LEDJAUNE2);
      palClearPad(PORT_C, PC_LEDROUGE);
    }
    else if(bCliGOn){
	
	palClearPad(PORT_A, PA_LEDJAUNE1);
    	palSetPad(PORT_A, PA_LEDJAUNE1);
	unsigned i;
	for (i=0; i < 10; i++){
		osalThreadSleepMilliseconds(250);
		palTogglePad(PORT_A, PA_LEDJAUNE1);
    	}
	bCliGOn = false;
	palSetPort(PORT_C, PAL_PORT_BIT(PA_LEDJAUNE1));
        palClearPad(PORT_A, PA_LEDJAUNE1);
    }
    else if(bCliGOn){
	
	palClearPad(PORT_A, PA_LEDJAUNE2);
    	palSetPad(PORT_A, PA_LEDJAUNE2);
	unsigned i;
	for (i=0; i < 10; i++){
		osalThreadSleepMilliseconds(250);
		palTogglePad(PORT_A, PA_LEDJAUNE2);
    	}
	bCliGOn = false;
	palSetPort(PORT_C, PAL_PORT_BIT(PA_LEDJAUNE2));
        palClearPad(PORT_A, PA_LEDJAUNE2);
    }
    else{
      osalThreadSleepMilliseconds(1000);
    }

  }

  return 0;
}

/*
 * Application entry point.
 */
int main(void) {
  Thread *shelltp = NULL;
  Thread *shelltp_car = NULL;

  /* Initialization of all the imported components in the order specified in
   the application wizard. The function is generated automatically.*/
  componentsInit();

  /* initialize the speed sensor */
  initSpeedSensor();

  /* initialize the Events */
  initEvents();

  /*
   * Initializes the PWM driver 1 (Motor)
   */
  pwmStart(&PWMD1, &pwm_config_cfgmotor);

  /*
   * Activates the serial driver 1 using the driver default configuration.
   */
  sdStart(&SD1, NULL);
  sdStart(&SD2, NULL);

  /*
   * Starts the PWM channel 0 using percentage dutsetspeedy cycle.
   */
  pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0));
  pwmEnableChannel(&PWMD1, 1, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 0));

  /*
   * Creates the blinker thread. (to see if the car is alive)
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  /* Application main loop.*/
  while (1) {
    if (!shelltp) {
      shelltp = shellCreate(&shell_cfg1, SHELL_WA_SIZE, NORMALPRIO);
    }
    else if (!shelltp_car) {
      shelltp_car = shellCreate(&shell_cfg_car, SHELL_WA_SIZE,
      NORMALPRIO);
    }
    else if (chThdTerminated(shelltp)) {
      chThdRelease(shelltp); /* Recovers memory of the previous shell.   */
      shelltp = NULL; /* Triggers spawning of a new shell.        */
    }
    else if (chThdTerminated(shelltp_car)) {
      chThdRelease(shelltp_car); /* Recovers memory of the previous shell.   */
      shelltp_car = NULL; /* Triggers spawning of a new shell.        */
    }
    chThdSleepMilliseconds(1000);
  }
}
